Lab 9: Deploy Appointments Scheduler App with Application Load Balancer (ALB)
Objective

Replace the Classic Load Balancer with an Application Load Balancer in your Kubernetes cluster and verify the application.

Steps

Verify Cluster & Load Balancer

eksctl get cluster
kubectl get svc


Confirm the existing Classic Load Balancer.

Copy its DNS name to access the app (before replacing it).

Tag Public Subnets for Auto Discovery

Subnet: ELB Public Subnet 1 & 2

kubernetes.io/role/elb → 1

kubernetes.io/cluster/eks-cluster → owned

Install Helm & EKS Charts

curl -L https://git.io/get_helm.sh | bash -s -- --version v3.8.2
helm repo add eks https://aws.github.io/eks-charts
helm repo update eks


Remove Classic Load Balancer

Edit appointments-service.yml: delete type: LoadBalancer

Apply changes:

kubectl apply -f appointments-app/manifests/.


Install AWS Load Balancer Controller

helm install aws-load-balancer-controller eks/aws-load-balancer-controller \
  --set clusterName=eks-cluster \
  --set serviceAccount.create=false \
  --set serviceAccount.name=appointments-sa


Verify deployment & pods:

kubectl get deployments
kubectl get pods


Create Ingress & Update Service

Create appointments-ingress.yml with ALB annotations.

Update appointments-service.yml:

type: NodePort


Apply changes:

kubectl apply -f appointments-app/manifests/.


Verify ALB

Go to EC2 → Load Balancers, copy DNS name.

Check Target Groups: pods should show Healthy.

Open DNS in browser to verify the app.

Outcome

Classic Load Balancer replaced with ALB.

App accessible via ALB.

Learned subnet tagging, ingress, and ALB deployment in EKS.
